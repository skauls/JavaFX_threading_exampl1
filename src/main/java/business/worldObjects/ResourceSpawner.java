package main.java.business.worldObjects;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import main.java.business.logicalObjects.CartesianCoordinate;
import main.java.business.logicalObjects.PolarCoordinate;


/**
 * Let the user spawn {@link Resource}s manually.
 * 
 * @author Steven Schwenke
 */
public class ResourceSpawner implements WorldObject {

	private CartesianCoordinate position;

	/** resources generated by this spawner */
	private Set<Resource> resources;

	/** the radius in which to spawn new {@link Resource}s */
	private double radius;

	public ResourceSpawner(CartesianCoordinate position, double radius) {
		super();
		this.position = position;
		this.radius = radius;
		resources = new HashSet<Resource>();

		// TODO Make this editable from the UI
		new Timer().schedule(new TimerTask() {
			@Override
			public void run() {
				spawn();
			}
		}, 0, 3000);
	}

	/**
	 * Spawns a {@link Resource} in the vicinity of this {@link ResourceSpawner}
	 * .
	 */
	public void spawn() {

		Random random = new Random();

		double angle = random.nextDouble() * 360;
		double distance = random.nextDouble() * radius;

		CartesianCoordinate cc = new PolarCoordinate(angle, distance)
				.toCartesianCoordinates();

		Resource newRessource = new Resource(new CartesianCoordinate(
				position.getX() + cc.getX(), position.getY() + cc.getY()));
		resources.add(newRessource);

		World.getInstance().addWorldObject(newRessource);
	}

	@Override
	public void destroy() {
		World.getInstance().removeWorldObject(this);
	}

	/**
	 * @return the amount of spawned resources of this spawner.
	 */
	public int getResources() {
		return resources.size();
	}

	public CartesianCoordinate getPosition() {
		return position;
	}

	public void setPosition(CartesianCoordinate position) {
		this.position = position;
	}

	public double getRadius() {
		return radius;
	}

	public void setRadius(double radius) {
		this.radius = radius;
	}

}
